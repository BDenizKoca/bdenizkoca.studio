---
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import ProjectSlider from '../../../components/ProjectSlider.astro';
import Lightbox from '../../../components/Lightbox.astro';
import { formatDateShort, getAltLangSlug } from '../../../utils';

export const getStaticPaths = (async () => {
  const allProjects = await getCollection('projects');
  const trProjects = allProjects.filter(({ data }) => data.lang === 'tr');

  return trProjects.map(project => ({
    params: { slug: project.data.slug || project.slug.replace(/^tr\//, '') },
    props: {
      project,
      altLangSlug: getAltLangSlug(allProjects, project.slug, 'tr')
    }
  }));
}) satisfies GetStaticPaths;

const { project, altLangSlug } = Astro.props;
const { Content } = await project.render();

// Get the alternate language entry to check for custom slug override
const altProject = altLangSlug ? await getCollection('projects').then(all => all.find(p => p.slug === altLangSlug)) : null;
const cleanAltSlug = altProject?.data.slug || altLangSlug?.replace(/^en\//, '');
const altLangUrl = cleanAltSlug ? `/projects/${cleanAltSlug}/` : undefined;
---

<BaseLayout
  title={project.data.meta_title || project.data.title}
  description={project.data.meta_description || project.data.description}
  lang="tr"
  bodyClass="page-project"
  coverImage={project.data.cover_image}
  altLangUrl={altLangUrl}
  schemaType="CreativeWork"
  datePublished={project.data.date.toISOString()}
>
  <Header slot="header" lang="tr" currentPath={Astro.url.pathname} altLangUrl={altLangUrl} />
  
  <article class="project-article container">
    <header class="project-header">
      <div class="project-header-content">
        <h1>{project.data.title}</h1>
        <div class="project-date-badge">
          <span class="badge-label">Yayınlandı:</span> {formatDateShort(project.data.date)}
          {project.data.updated && (
            <>
              <span class="badge-separator">·</span>
              <span class="badge-label">Son Düzenleme:</span> {formatDateShort(project.data.updated)}
            </>
          )}
        </div>
        <p class="project-description">{project.data.description}</p>
      </div>
    </header>
    {project.data.slider_items && project.data.slider_items.length > 0 ? (
      <ProjectSlider sliderItems={project.data.slider_items} projectTitle={project.data.title} />
    ) : project.data.hover_video ? (
      <div class="project-hero">
        <video src={project.data.hover_video} controls autoplay loop muted playsinline>
          Tarayıcınız video etiketini desteklemiyor.
        </video>
      </div>
    ) : project.data.cover_image && (
      <div class="project-hero">
        <img src={project.data.cover_image} alt={project.data.title} loading="lazy" decoding="async" />
      </div>
    )}
    <div class="project-content prose">
      <Content />
    </div>
  </article>

  <Lightbox />

  <Footer slot="footer" lang="tr" />

  <script>
    // Fetch GitHub star count
    async function fetchStarCount() {
      const starCountEl = document.querySelector('.star-count');
      if (!starCountEl) return;

      const repo = starCountEl.getAttribute('data-repo');
      if (!repo) return;

      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000);

        const response = await fetch(`https://api.github.com/repos/${repo}`, {
          signal: controller.signal
        });
        clearTimeout(timeoutId);

        if (!response.ok) throw new Error(`HTTP ${response.status}`);

        const data = await response.json();
        if (data.stargazers_count !== undefined) {
          starCountEl.textContent = `★ ${data.stargazers_count.toLocaleString()}`;
        }
      } catch (error) {
        console.error('Failed to fetch star count:', error);
        starCountEl.textContent = '★';
      }
    }

    fetchStarCount();
  </script>
</BaseLayout>
