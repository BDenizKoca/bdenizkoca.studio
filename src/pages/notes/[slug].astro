---
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { formatDate, getAltLangSlug } from '../../utils';

export const getStaticPaths = (async () => {
  const allNotes = await getCollection('notes');
  const enNotes = allNotes.filter(({ data }) => data.lang === 'en');

  return enNotes.map(note => ({
    params: { slug: note.data.slug || note.slug.replace(/^en\//, '') },
    props: {
      note,
      altLangSlug: getAltLangSlug(allNotes, note.slug, 'en')
    }
  }));
}) satisfies GetStaticPaths;

const { note, altLangSlug } = Astro.props;
const { Content } = await note.render();

// Get the alternate language entry to check for custom slug override
const altNote = altLangSlug ? await getCollection('notes').then(all => all.find(n => n.slug === altLangSlug)) : null;
const cleanAltSlug = altNote?.data.slug || altLangSlug?.replace(/^tr\//, '');
const altLangUrl = cleanAltSlug ? `/tr/notlar/${cleanAltSlug}/` : undefined;
---

<BaseLayout
  title={note.data.meta_title || note.data.title}
  description={note.data.meta_description || note.data.description}
  lang="en"
  bodyClass="page-note"
  altLangUrl={altLangUrl}
  schemaType="BlogPosting"
  datePublished={note.data.date.toISOString()}
  dateModified={note.data.updated?.toISOString()}
>
  <Header slot="header" lang="en" currentPath={Astro.url.pathname} altLangUrl={altLangUrl} />
  
  <article class="note-article container">
    <header class="article-hero article-hero--simple">
      <div class="article-hero__inner">
        <div class="article-hero__primary">
          <h1>{note.data.title}</h1>
          {note.data.description && (
            <p class="article-hero__intro">{note.data.description}</p>
          )}
        </div>
        <dl class="article-hero__meta">
          <div>
            <dt>Published</dt>
            <dd>
              <time datetime={note.data.date.toISOString()}>
                {formatDate(note.data.date)}
              </time>
            </dd>
          </div>
          {note.data.updated && (
            <div>
              <dt>Last Updated</dt>
              <dd>
                <time datetime={note.data.updated.toISOString()}>
                  {formatDate(note.data.updated)}
                </time>
              </dd>
            </div>
          )}
        </dl>
      </div>
    </header>
    <div class="note-content prose">
      <Content />
    </div>
  </article>

  <Footer slot="footer" lang="en" />
</BaseLayout>
