---
import type { CollectionEntry } from 'astro:content';

interface Props {
  sliderItems: CollectionEntry<'projects'>['data']['slider_items'];
  projectTitle: string;
}

const { sliderItems, projectTitle } = Astro.props;

// Handle optional sliderItems
if (!sliderItems || sliderItems.length === 0) {
  return null;
}
---

<div class="project-slider">
  <div class="slider-container">
    <div class="slider-track">
      {sliderItems.map((item, index) => (
        <div class={`slider-item ${index === 0 ? 'active' : ''}`}>
          {item.type === 'video' ? (
            <video src={item.src} controls autoplay loop muted playsinline disablepictureinpicture controlslist="nodownload nopictureinpicture">
              Your browser does not support the video tag.
            </video>
          ) : (
            <button class="lightbox-trigger" data-lightbox-src={item.src} aria-label="View full size image">
              <img src={item.src} alt={`${projectTitle} - Slide ${index + 1}`} loading="lazy" decoding="async" />
            </button>
          )}
        </div>
      ))}
    </div>
    {sliderItems.length > 1 && (
      <>
        <button class="slider-nav slider-prev" aria-label="Previous slide">‹</button>
        <button class="slider-nav slider-next" aria-label="Next slide">›</button>
        <div class="slider-dots">
          {sliderItems.map((_, index) => (
            <button
              class={`slider-dot ${index === 0 ? 'active' : ''}`}
              data-slide={index}
              aria-label={`Go to slide ${index + 1}`}
            ></button>
          ))}
        </div>
      </>
    )}
  </div>
</div>

<script>
  (function setupProjectSliders() {
    function init() {
      const sliders = document.querySelectorAll('.project-slider');
      sliders.forEach(slider => {
        // Avoid double-initialization
        if (slider.dataset.sliderInit === '1') return;
        slider.dataset.sliderInit = '1';

        const items = slider.querySelectorAll('.slider-item');
        if (items.length === 0) return;

        const dots = slider.querySelectorAll('.slider-dot');
        const prevBtn = slider.querySelector('.slider-prev');
        const nextBtn = slider.querySelector('.slider-next');
        let currentSlide = 0;

        function goToSlide(index) {
          items.forEach(item => item.classList.remove('active'));
          dots.forEach(dot => dot.classList.remove('active'));

          const idx = Math.max(0, Math.min(index, items.length - 1));
          items[idx].classList.add('active');
          if (dots[idx]) dots[idx].classList.add('active');

          currentSlide = idx;
        }

        function nextSlide() {
          const next = (currentSlide + 1) % items.length;
          goToSlide(next);
        }

        function prevSlide() {
          const prev = (currentSlide - 1 + items.length) % items.length;
          goToSlide(prev);
        }

        // Use event delegation where helpful and ensure handlers are attached
        if (prevBtn) prevBtn.addEventListener('click', (e) => { e.stopPropagation(); prevSlide(); });
        if (nextBtn) nextBtn.addEventListener('click', (e) => { e.stopPropagation(); nextSlide(); });

        dots.forEach((dot, index) => {
          dot.addEventListener('click', (e) => { e.stopPropagation(); goToSlide(index); });
        });

        slider.addEventListener('keydown', (e) => {
          const key = e.key;
          if (key === 'ArrowLeft') prevSlide();
          if (key === 'ArrowRight') nextSlide();
        });
      });
    }

    // Init on both Astro client event and standard DOMContentLoaded as a fallback
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }

    // Astro-specific event (if present) — safe to call init again because we guard with dataset
    document.addEventListener('astro:page-load', init);
  })();
</script>
