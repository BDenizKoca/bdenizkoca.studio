---
import type { CollectionEntry } from 'astro:content';

interface Props {
  sliderItems: CollectionEntry<'projects'>['data']['slider_items'];
  projectTitle: string;
}

const { sliderItems, projectTitle } = Astro.props;

// Handle optional sliderItems
if (!sliderItems || sliderItems.length === 0) {
  return null;
}
---

<div class="project-slider">
  <div class="slider-container">
    <div class="slider-track">
      {sliderItems.map((item, index) => (
        <div class={`slider-item ${index === 0 ? 'active' : ''}`}>
          {item.type === 'video' ? (
            <video src={item.src} controls autoplay loop muted playsinline disablepictureinpicture controlslist="nodownload nopictureinpicture">
              Your browser does not support the video tag.
            </video>
          ) : (
            <button class="lightbox-trigger" data-lightbox-src={item.src} aria-label="View full size image">
              <img src={item.src} alt={`${projectTitle} - Slide ${index + 1}`} loading="lazy" decoding="async" />
            </button>
          )}
        </div>
      ))}
    </div>
    {sliderItems.length > 1 && (
      <>
        <button class="slider-nav slider-prev" aria-label="Previous slide">‹</button>
        <button class="slider-nav slider-next" aria-label="Next slide">›</button>
        <div class="slider-dots">
          {sliderItems.map((_, index) => (
            <button
              class={`slider-dot ${index === 0 ? 'active' : ''}`}
              data-slide={index}
              aria-label={`Go to slide ${index + 1}`}
            ></button>
          ))}
        </div>
      </>
    )}
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const sliders = document.querySelectorAll('.project-slider');
    sliders.forEach(slider => {
      const items = slider.querySelectorAll('.slider-item');
      if (items.length === 0) return;

      const dots = slider.querySelectorAll('.slider-dot');
      const prevBtn = slider.querySelector('.slider-prev');
      const nextBtn = slider.querySelector('.slider-next');
      let currentSlide = 0;

      function goToSlide(index: number) {
        items.forEach(item => item.classList.remove('active'));
        dots.forEach(dot => dot.classList.remove('active'));

        items[index].classList.add('active');
        if (dots[index]) dots[index].classList.add('active');

        currentSlide = index;
      }

      function nextSlide() {
        const next = (currentSlide + 1) % items.length;
        goToSlide(next);
      }

      function prevSlide() {
        const prev = (currentSlide - 1 + items.length) % items.length;
        goToSlide(prev);
      }

      if (prevBtn) prevBtn.addEventListener('click', prevSlide);
      if (nextBtn) nextBtn.addEventListener('click', nextSlide);

      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => goToSlide(index));
      });

      slider.addEventListener('keydown', (e) => {
        const key = (e as KeyboardEvent).key;
        if (key === 'ArrowLeft') prevSlide();
        if (key === 'ArrowRight') nextSlide();
      });
    });
  });
</script>
