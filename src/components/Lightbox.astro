---
// This component does not require any props.
---

<div class="lightbox" id="lightbox">
  <button class="lightbox-close" aria-label="Close lightbox">Ã—</button>
  <div class="lightbox-content">
    <img src="" alt="" id="lightbox-image" loading="lazy" decoding="async" />
  </div>
</div>

<script>
  // Use delegated click handling so triggers are detected reliably even
  // if components initialize in different orders or elements are re-rendered.
  (function setupLightbox() {
    function openLightbox(src, alt) {
      const lightbox = document.getElementById('lightbox');
      const lightboxImage = document.getElementById('lightbox-image');
      if (!lightbox || !lightboxImage) return;
      const imgEl = lightboxImage as HTMLImageElement;
      imgEl.src = src;
      imgEl.alt = alt || '';
      lightbox.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
      const lightbox = document.getElementById('lightbox');
      if (!lightbox) return;
      lightbox.classList.remove('active');
      document.body.style.overflow = '';
    }

    // Click delegation: handle clicks on any element matching .lightbox-trigger
    document.addEventListener('click', (e) => {
      const trigger = (e.target as Element).closest?.('.lightbox-trigger') as HTMLElement | null;
      if (trigger) {
        const src = trigger.getAttribute('data-lightbox-src');
        const img = trigger.querySelector('img');
        if (src) {
          openLightbox(src, (img as HTMLImageElement)?.alt || '');
          e.preventDefault();
          e.stopPropagation();
        }
      }
    });

    // Close button
    document.addEventListener('click', (e) => {
      const closeBtn = (e.target as Element).closest?.('.lightbox-close') as HTMLElement | null;
      if (closeBtn) {
        e.preventDefault();
        closeLightbox();
      }
    });

    // Click outside image to close
    document.addEventListener('click', (e) => {
      const lightbox = document.getElementById('lightbox');
      if (!lightbox) return;
      if (lightbox.classList.contains('active') && e.target === lightbox) {
        closeLightbox();
      }
    });

    // Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') closeLightbox();
    });

    // Also listen for astro:page-load if present
    document.addEventListener('astro:page-load', () => {/* no-op; delegation covers it */});
  })();
</script>
